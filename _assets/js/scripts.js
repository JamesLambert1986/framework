  var arrVars = {bp_sml:'300', bp_sml_optimal:'360', bp_med:'568', bp_med_optimal:'760', bp_lrg:'800', bp_lrg_optimal:'1240', bp_lrg_grow:'10', grid_max_width:'1240', grid_gutter:'20', grid_rythm:'12', grid_spacing:'24', grid_sml_cols:'4', grid_med_cols:'6', grid_lrg_cols:'12', colour_first:'#e6321b', colour_second:'#CDD546', colour_disabled:'#ff0000', colour_error:'#ff0000', }; (function (factory) {  if (typeof define == 'function' && define.amd) {  define(['jquery'], factory);  } else if (typeof exports === 'object') {  module.exports = factory(require('jquery'));  } else {   factory(jQuery);  } }(function ($) {  var inviewObjects = [], viewportSize, viewportOffset, d = document, w = window, documentElement = d.documentElement, timer;  $.event.special.inview = {   add:function(data) { inviewObjects.push({ data:data, $element:$(this), element:this });   if (!timer && inviewObjects.length) {  timer = setInterval(checkInView, 250); }   },   remove:function(data) { for (var i=0; i<inviewObjects.length; i++) {  var inviewObject = inviewObjects[i];  if (inviewObject.element === this && inviewObject.data.guid === data.guid) {   inviewObjects.splice(i, 1);   break;  } }  if (!inviewObjects.length) {  clearInterval(timer);  timer = null; }   }  };  function getViewportSize() {   var mode, domObject, size = { height:w.innerHeight, width:w.innerWidth };  if (!size.height) { mode = d.compatMode; if (mode || !$.support.boxModel) {  domObject = mode === 'CSS1Compat' ?   documentElement :   d.body;  size = {   height:domObject.clientHeight,   width: domObject.clientWidth  }; }   }   return size;  }  function getViewportOffset() {   return { top: w.pageYOffset || documentElement.scrollTop  || d.body.scrollTop, left:w.pageXOffset || documentElement.scrollLeft || d.body.scrollLeft   };  }  function checkInView() {   if (!inviewObjects.length) { return;   }   var i = 0, $elements = $.map(inviewObjects, function(inviewObject) { var selector = inviewObject.data.selector,   $element = inviewObject.$element; return selector ? $element.find(selector) :$element;   });   viewportSize  = viewportSize  || getViewportSize();   viewportOffset = viewportOffset || getViewportOffset();   for (; i<inviewObjects.length; i++) { if (!$.contains(documentElement, $elements[i][0])) {  continue; } var $element   = $($elements[i]),   elementSize  = { height:$element[0].offsetHeight, width:$element[0].offsetWidth },   elementOffset = $element.offset(),   inView = $element.data('inview');    if (!viewportOffset || !viewportSize) {  return; } if (elementOffset.top + elementSize.height > viewportOffset.top &&   elementOffset.top < viewportOffset.top + viewportSize.height &&   elementOffset.left + elementSize.width > viewportOffset.left &&   elementOffset.left < viewportOffset.left + viewportSize.width) {  if (!inView) {   $element.data('inview', true).trigger('inview', [true]);  } } else if (inView) {  $element.data('inview', false).trigger('inview', [false]); }   }  }  $(w).on("scroll resize scrollstop", function() {   viewportSize = viewportOffset = null;  }); if (!documentElement.addEventListener && documentElement.attachEvent) {   documentElement.attachEvent("onfocusin", function() { viewportOffset = null;   });  } }));  function embed(svg, target) {  if (target) {   var fragment = document.createDocumentFragment(); var viewBox = !svg.getAttribute('viewBox') && target.getAttribute('viewBox'); if (viewBox) {  svg.setAttribute('viewBox', viewBox);  } var clone = target.cloneNode(true); while (clone.childNodes.length) {  fragment.appendChild(clone.firstChild);  } svg.appendChild(fragment); } } function loadreadystatechange(xhr) {  xhr.onreadystatechange = function () {   if (xhr.readyState === 4) { var cachedDocument = xhr._cachedDocument;  if (!cachedDocument) {   cachedDocument = xhr._cachedDocument = document.implementation.createHTMLDocument('');   cachedDocument.body.innerHTML = xhr.responseText;   xhr._cachedTarget = {};  }  xhr._embeds.splice(0).map(function (item) {  var target = xhr._cachedTarget[item.id];   if (!target) {   target = xhr._cachedTarget[item.id] = cachedDocument.getElementById(item.id);   }   embed(item.svg, target);  });  } };   xhr.onreadystatechange(); } function svg4everybody(rawopts) { var opts = Object(rawopts);   var nosvg; var fallback;   var polyfill; var olderIEUA = /\bMSIE [1-8]\.0\b/; var newerIEUA = /\bTrident\/[567]\b|\bMSIE (?:9|10)\.0\b/; var webkitUA = /\bAppleWebKit\/(\d+)\b/; var olderEdgeUA = /\bEdge\/12\.(\d+)\b/;  if ('polyfill' in opts) {  polyfill = opts.polyfill; } else {  polyfill = newerIEUA.test(navigator.userAgent) || (navigator.userAgent.match(olderEdgeUA) || [])[1] < 10547 || (navigator.userAgent.match(webkitUA) || [])[1] < 537; }   var requests = {};   var requestAnimationFrame = window.requestAnimationFrame || setTimeout;   var uses = document.getElementsByTagName('use');  function oninterval() {   var index = 0; while (index < uses.length) { var use = uses[index];  var svg = use.parentNode;   if (svg && /svg/i.test(svg.nodeName)) {   var src = use.getAttribute('xlink:href'); if (polyfill) {   if (!opts.validate || opts.validate(src, svg, use)) { svg.removeChild(use);  var srcSplit = src.split('#'); var url = srcSplit.shift(); var id = srcSplit.join('#');  if (url.length) {  var xhr = requests[url];   if (!xhr) {  xhr = requests[url] = new XMLHttpRequest();  xhr.open('GET', url);  xhr.send();  xhr._embeds = []; }   xhr._embeds.push({  svg:svg,  id:id });   loadreadystatechange(xhr); } else {  embed(svg, document.getElementById(id)); }   }   }  } else {  ++index;  }  } requestAnimationFrame(oninterval, 67); }   if (polyfill) {  oninterval(); } }